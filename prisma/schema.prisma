generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id
  organizations Organization[]
  crafts        Craft[]
  CustomTheme   CustomTheme[]
  UploadedImage UploadedImage[]
}

model Organization {
  id            String          @id
  users         User[]
  crafts        Craft[]
  CustomTheme   CustomTheme[]
  UploadedImage UploadedImage[]
}

model Craft {
  id             String         @id @default(nanoid(10))
  title          String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?
  craftVersions  CraftVersion[]

  webhookConnection   WebhookConnection? @relation(fields: [webhookConnectionId], references: [id])
  emailConnection     EmailConnection?   @relation(fields: [emailConnectionId], references: [id])
  webhookConnectionId String?
  emailConnectionId   String?
}

model CraftVersion {
  id               String            @id @default(cuid())
  publishedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  craft            Craft?            @relation(fields: [craftId], references: [id], onDelete: Cascade)
  craftId          String?
  craftSubmissions CraftSubmission[]

  /// [CraftVersionData]
  data Json
}

model CraftSubmission {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  craftVersion   CraftVersion? @relation(fields: [craftVersionId], references: [id], onDelete: Cascade)
  craftVersionId String?
  data           Json
}

model CustomTheme {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  /// [CraftTheme]
  data Json
}

model UploadedImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String

  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model WebhookConnection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  secret    String   @default(cuid())
  Craft     Craft[]
}

model EmailConnection {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  email       String
  Craft       Craft[]
}
