generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                  String               @id
  organizations       Organization[]
  crafts              Craft[]
  CustomTheme         CustomTheme[]
  uploadedImages      UploadedImage[]
  stripeCustomer      StripeCustomer?
  stripeSubscriptions StripeSubscription[]
  stripeAccounts      StripeAccount[]
}

model Organization {
  id                  String               @id
  users               User[]
  crafts              Craft[]
  CustomTheme         CustomTheme[]
  uploadedImages      UploadedImage[]
  stripeCustomer      StripeCustomer?
  stripeSubscriptions StripeSubscription[]
  stripeAccounts      StripeAccount[]
}

model Craft {
  id               String            @id @default(nanoid(10))
  title            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  archivedAt       DateTime?
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  organizationId   String?
  craftVersions    CraftVersion[]
  craftSubmissions CraftSubmission[]

  webhookConnection        WebhookConnection?      @relation(fields: [webhookConnectionId], references: [id])
  webhookConnectionId      String?
  emailConnection          EmailConnection?        @relation(fields: [emailConnectionId], references: [id])
  emailConnectionId        String?
  googleSheetsConnection   GoogleSheetsConnection? @relation(fields: [googleSheetsConnectionId], references: [id])
  googleSheetsConnectionId String?
}

model CraftVersion {
  id               String            @id @default(cuid())
  publishedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  craft            Craft             @relation(fields: [craftId], references: [id], onDelete: Cascade)
  craftId          String
  craftSubmissions CraftSubmission[]

  /// [CraftVersionData]
  data Json
}

model CraftSubmission {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  craft          Craft        @relation(fields: [craftId], references: [id], onDelete: Cascade)
  craftId        String
  craftVersion   CraftVersion @relation(fields: [craftVersionId], references: [id], onDelete: Cascade)
  craftVersionId String

  /// [CraftSubmissionData]
  data Json
}

model CustomTheme {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  /// [CraftTheme]
  data Json
}

model UploadedImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String

  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model WebhookConnection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  secret    String   @default(cuid())
  craft     Craft[]
}

model EmailConnection {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  confirmedAt      DateTime?
  email            String
  craft            Craft[]
  confirmationCode String    @default(nanoid(6))
}

model GoogleSheetsConnection {
  id                          String                    @id @default(cuid())
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  sheetId                     String
  sheetUrl                    String
  connectionProblem           Boolean                   @default(false)
  authorization               GoogleSheetsAuthorization @relation(fields: [googleSheetsAuthorizationId], references: [id])
  googleSheetsAuthorizationId String
  craft                       Craft[]
}

model GoogleSheetsAuthorization {
  id                      String                   @id @default(cuid())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  id_token                String
  access_token            String
  refresh_token           String
  token_type              String
  expiry_date             BigInt
  scope                   String
  googleSheetsConnections GoogleSheetsConnection[]
}

enum StripePriceType {
  recurring
  one_time
}

enum StripePriceInterval {
  month
  year
  week
  day
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model StripeCustomer {
  id             String               @id @unique
  createdAt      DateTime             @default(now())
  user           User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?              @unique
  organization   Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?              @unique
  subscriptions  StripeSubscription[]
}

model StripePrice {
  id             String               @id
  active         Boolean
  created        DateTime
  currency       String
  type           StripePriceType
  unit_amount    Int?
  interval       StripePriceInterval?
  interval_count Int?
  metadata       Json
  lookup_key     String?

  product   StripeProduct @relation(name: "Prices", fields: [productId], references: [id])
  productId String

  subscriptionItems StripeSubscriptionItem[]
}

model StripeProduct {
  id             String        @id
  active         Boolean
  name           String
  description    String?
  livemode       Boolean
  created        DateTime
  updated        DateTime
  metadata       Json
  defaultPriceId String?
  prices         StripePrice[] @relation(name: "Prices")
}

model StripeSubscriptionItem {
  id             String              @id
  object         String
  created        DateTime
  discounts      String[]
  metadata       Json
  price          StripePrice         @relation(fields: [priceId], references: [id])
  priceId        String
  quantity       Int?
  subscription   StripeSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String?
}

model StripeSubscription {
  id                     String                   @id
  cancel_at_period_end   Boolean
  currency               String
  current_period_end     DateTime
  current_period_start   DateTime
  trial_end              DateTime?
  trial_start            DateTime?
  ended_at               DateTime?
  cancel_at              DateTime?
  canceled_at            DateTime?
  customer               StripeCustomer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId             String
  user                   User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String?
  organization           Organization?            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId         String?
  default_payment_method String?
  description            String?
  items                  StripeSubscriptionItem[]
  metadata               Json
  status                 StripeSubscriptionStatus
}

model StripeAccount {
  id             String        @id @unique
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  charges_enabled   Boolean @default(false)
  transfers_enabled Boolean @default(false)
  details_submitted Boolean @default(false)
}
