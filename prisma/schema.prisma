generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id
  organizations Organization[]
  crafts        Craft[]
  CustomTheme   CustomTheme[]
  UploadedImage UploadedImage[]
}

model Organization {
  id            String          @id
  users         User[]
  crafts        Craft[]
  CustomTheme   CustomTheme[]
  UploadedImage UploadedImage[]
}

model Craft {
  id               String            @id @default(nanoid(10))
  title            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  archivedAt       DateTime?
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  organizationId   String?
  craftVersions    CraftVersion[]
  craftSubmissions CraftSubmission[]

  webhookConnection        WebhookConnection?      @relation(fields: [webhookConnectionId], references: [id])
  webhookConnectionId      String?
  emailConnection          EmailConnection?        @relation(fields: [emailConnectionId], references: [id])
  emailConnectionId        String?
  googleSheetsConnection   GoogleSheetsConnection? @relation(fields: [googleSheetsConnectionId], references: [id])
  googleSheetsConnectionId String?
}

model CraftVersion {
  id               String            @id @default(cuid())
  publishedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  craft            Craft             @relation(fields: [craftId], references: [id], onDelete: Cascade)
  craftId          String
  craftSubmissions CraftSubmission[]

  /// [CraftVersionData]
  data Json
}

model CraftSubmission {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  craft          Craft        @relation(fields: [craftId], references: [id], onDelete: Cascade)
  craftId        String
  craftVersion   CraftVersion @relation(fields: [craftVersionId], references: [id], onDelete: Cascade)
  craftVersionId String

  /// [CraftSubmissionData]
  data Json
}

model CustomTheme {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  /// [CraftTheme]
  data Json
}

model UploadedImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String

  user           User          @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model WebhookConnection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  secret    String   @default(cuid())
  craft     Craft[]
}

model EmailConnection {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  confirmedAt      DateTime?
  email            String
  craft            Craft[]
  confirmationCode String    @default(nanoid(6))
}

model GoogleSheetsConnection {
  id                          String                    @id @default(cuid())
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  sheetId                     String
  sheetUrl                    String
  connectionProblem           Boolean                   @default(false)
  authorization               GoogleSheetsAuthorization @relation(fields: [googleSheetsAuthorizationId], references: [id])
  googleSheetsAuthorizationId String
  craft                       Craft[]
}

model GoogleSheetsAuthorization {
  id                      String                   @id @default(cuid())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  id_token                String
  access_token            String
  refresh_token           String
  token_type              String
  expiry_date             BigInt
  scope                   String
  googleSheetsConnections GoogleSheetsConnection[]
}
